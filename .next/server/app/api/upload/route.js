"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/upload/route";
exports.ids = ["app/api/upload/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "./action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "./request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "./static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_gaureesh_StudyFetch_AiTutor_app_api_upload_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/upload/route.ts */ \"(rsc)/./app/api/upload/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/upload/route\",\n        pathname: \"/api/upload\",\n        filename: \"route\",\n        bundlePath: \"app/api/upload/route\"\n    },\n    resolvedPagePath: \"/Users/gaureesh/StudyFetch/AiTutor/app/api/upload/route.ts\",\n    nextConfigOutput,\n    userland: _Users_gaureesh_StudyFetch_AiTutor_app_api_upload_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/upload/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ1cGxvYWQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnVwbG9hZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnVwbG9hZCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmdhdXJlZXNoJTJGU3R1ZHlGZXRjaCUyRkFpVHV0b3IlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGZ2F1cmVlc2glMkZTdHVkeUZldGNoJTJGQWlUdXRvciZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDVTtBQUN2RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBkZi10dXRvci8/NTU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvZ2F1cmVlc2gvU3R1ZHlGZXRjaC9BaVR1dG9yL2FwcC9hcGkvdXBsb2FkL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS91cGxvYWQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS91cGxvYWRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3VwbG9hZC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9nYXVyZWVzaC9TdHVkeUZldGNoL0FpVHV0b3IvYXBwL2FwaS91cGxvYWQvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3VwbG9hZC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/upload/route.ts":
/*!*********************************!*\
  !*** ./app/api/upload/route.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./lib/auth.ts\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _lib_pdf_chunking__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/pdf-chunking */ \"(rsc)/./lib/pdf-chunking.ts\");\n\n\n\n\n\n\n\n\nasync function POST(req) {\n    try {\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session?.user?.email) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Unauthorized\"\n            }, {\n                status: 401\n            });\n        }\n        // Get user from database to get the actual user ID\n        const user = await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.user.findUnique({\n            where: {\n                email: session.user.email\n            }\n        });\n        if (!user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User not found\"\n            }, {\n                status: 404\n            });\n        }\n        const formData = await req.formData();\n        const file = formData.get(\"file\");\n        if (!file) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No file uploaded\"\n            }, {\n                status: 400\n            });\n        }\n        if (file.type !== \"application/pdf\") {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Only PDF files are allowed\"\n            }, {\n                status: 400\n            });\n        }\n        if (file.size > 10 * 1024 * 1024) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"File size must be less than 10MB\"\n            }, {\n                status: 400\n            });\n        }\n        // Create uploads directory if it doesn't exist\n        const uploadDir = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)(process.cwd(), \"uploads\");\n        try {\n            await (0,fs_promises__WEBPACK_IMPORTED_MODULE_4__.mkdir)(uploadDir, {\n                recursive: true\n            });\n        } catch (error) {\n        // Directory might already exist\n        }\n        // Generate unique filename\n        const fileId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n        const fileName = `${fileId}.pdf`;\n        const filePath = (0,path__WEBPACK_IMPORTED_MODULE_5__.join)(uploadDir, fileName);\n        // Save file to disk\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_4__.writeFile)(filePath, buffer);\n        // Save to database\n        const pdf = await _lib_db__WEBPACK_IMPORTED_MODULE_3__.prisma.pDF.create({\n            data: {\n                id: fileId,\n                ownerId: user.id,\n                filename: fileName,\n                originalName: file.name,\n                filePath: filePath,\n                fileSize: file.size\n            }\n        });\n        // Automatically chunk the PDF after upload\n        try {\n            console.log(`Starting automatic chunking for PDF: ${pdf.id}`);\n            const chunkingResult = await (0,_lib_pdf_chunking__WEBPACK_IMPORTED_MODULE_6__.extractAndSaveChunks)(pdf.id);\n            if (chunkingResult.success) {\n                console.log(`Successfully chunked PDF ${pdf.id}: ${chunkingResult.totalChunks} chunks created`);\n            } else {\n                console.error(`Failed to chunk PDF ${pdf.id}:`, chunkingResult.error);\n            }\n        } catch (chunkingError) {\n            console.error(`Error during automatic chunking for PDF ${pdf.id}:`, chunkingError);\n        // Don't fail the upload if chunking fails\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            pdfId: pdf.id,\n            message: \"File uploaded successfully and is being processed for AI chat\"\n        });\n    } catch (error) {\n        console.error(\"Upload error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/upload/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n\n\n\nconst authOptions = {\n    providers: [\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                const user = await _db__WEBPACK_IMPORTED_MODULE_2__.prisma.user.findUnique({\n                    where: {\n                        email: credentials.email\n                    }\n                });\n                if (!user) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name || user.email\n                };\n            }\n        })\n    ],\n    pages: {\n        signIn: \"/login\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.id = user.id;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token) {\n                session.user.id = token.id;\n            }\n            return session;\n        }\n    },\n    session: {\n        strategy: \"jwt\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNrRTtBQUNwQztBQUNBO0FBRXZCLE1BQU1HLGNBQStCO0lBQzFDQyxXQUFXO1FBQ1RKLDJFQUFtQkEsQ0FBQztZQUNsQkssTUFBTTtZQUNOQyxhQUFhO2dCQUNYQyxPQUFPO29CQUFFQyxPQUFPO29CQUFTQyxNQUFNO2dCQUFRO2dCQUN2Q0MsVUFBVTtvQkFBRUYsT0FBTztvQkFBWUMsTUFBTTtnQkFBVztZQUNsRDtZQUNBLE1BQU1FLFdBQVVMLFdBQVc7Z0JBQ3pCLElBQUksQ0FBQ0EsYUFBYUMsU0FBUyxDQUFDRCxhQUFhSSxVQUFVO29CQUNqRCxPQUFPO2dCQUNUO2dCQUVBLE1BQU1FLE9BQU8sTUFBTVYsdUNBQU1BLENBQUNVLElBQUksQ0FBQ0MsVUFBVSxDQUFDO29CQUN4Q0MsT0FBTzt3QkFDTFAsT0FBT0QsWUFBWUMsS0FBSztvQkFDMUI7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDSyxNQUFNO29CQUNULE9BQU87Z0JBQ1Q7Z0JBRUEsTUFBTUcsa0JBQWtCLE1BQU1kLHVEQUFjLENBQzFDSyxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0ssaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlMLEtBQUtLLEVBQUU7b0JBQ1hWLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJLElBQUlPLEtBQUtMLEtBQUs7Z0JBQy9CO1lBQ0Y7UUFDRjtLQUNEO0lBQ0RXLE9BQU87UUFDTEMsUUFBUTtJQUNWO0lBQ0FDLFdBQVc7UUFDVCxNQUFNQyxLQUFJLEVBQUVDLEtBQUssRUFBRVYsSUFBSSxFQUFFO1lBQ3ZCLElBQUlBLE1BQU07Z0JBQ1JVLE1BQU1MLEVBQUUsR0FBR0wsS0FBS0ssRUFBRTtZQUNwQjtZQUNBLE9BQU9LO1FBQ1Q7UUFDQSxNQUFNQyxTQUFRLEVBQUVBLE9BQU8sRUFBRUQsS0FBSyxFQUFFO1lBQzlCLElBQUlBLE9BQU87Z0JBQ1JDLFFBQVFYLElBQUksQ0FBU0ssRUFBRSxHQUFHSyxNQUFNTCxFQUFFO1lBQ3JDO1lBQ0EsT0FBT007UUFDVDtJQUNGO0lBQ0FBLFNBQVM7UUFDUEMsVUFBVTtJQUNaO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXBkZi10dXRvci8uL2xpYi9hdXRoLnRzP2JmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEF1dGhPcHRpb25zIH0gZnJvbSBcIm5leHQtYXV0aFwiO1xuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIjtcbmltcG9ydCBiY3J5cHQgZnJvbSBcImJjcnlwdGpzXCI7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiLi9kYlwiO1xuXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnM6IE5leHRBdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiBcImNyZWRlbnRpYWxzXCIsXG4gICAgICBjcmVkZW50aWFsczoge1xuICAgICAgICBlbWFpbDogeyBsYWJlbDogXCJFbWFpbFwiLCB0eXBlOiBcImVtYWlsXCIgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6IFwiUGFzc3dvcmRcIiwgdHlwZTogXCJwYXNzd29yZFwiIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyBhdXRob3JpemUoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscz8uZW1haWwgfHwgIWNyZWRlbnRpYWxzPy5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICBlbWFpbDogY3JlZGVudGlhbHMuZW1haWxcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghdXNlcikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoXG4gICAgICAgICAgY3JlZGVudGlhbHMucGFzc3dvcmQsXG4gICAgICAgICAgdXNlci5wYXNzd29yZFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSB8fCB1c2VyLmVtYWlsLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pXG4gIF0sXG4gIHBhZ2VzOiB7XG4gICAgc2lnbkluOiBcIi9sb2dpblwiLFxuICB9LFxuICBjYWxsYmFja3M6IHtcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgdXNlciB9KSB7XG4gICAgICBpZiAodXNlcikge1xuICAgICAgICB0b2tlbi5pZCA9IHVzZXIuaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSxcbiAgICBhc3luYyBzZXNzaW9uKHsgc2Vzc2lvbiwgdG9rZW4gfSkge1xuICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgIChzZXNzaW9uLnVzZXIgYXMgYW55KS5pZCA9IHRva2VuLmlkIGFzIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgfSxcbiAgc2Vzc2lvbjoge1xuICAgIHN0cmF0ZWd5OiBcImp3dFwiLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiYmNyeXB0IiwicHJpc21hIiwiYXV0aE9wdGlvbnMiLCJwcm92aWRlcnMiLCJuYW1lIiwiY3JlZGVudGlhbHMiLCJlbWFpbCIsImxhYmVsIiwidHlwZSIsInBhc3N3b3JkIiwiYXV0aG9yaXplIiwidXNlciIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsImlzUGFzc3dvcmRWYWxpZCIsImNvbXBhcmUiLCJpZCIsInBhZ2VzIiwic2lnbkluIiwiY2FsbGJhY2tzIiwiand0IiwidG9rZW4iLCJzZXNzaW9uIiwic3RyYXRlZ3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBRTlDLE1BQU1DLGtCQUFrQkM7QUFJakIsTUFBTUMsU0FBU0YsZ0JBQWdCRSxNQUFNLElBQUksSUFBSUgsd0RBQVlBLEdBQUc7QUFFbkUsSUFBSUksSUFBcUMsRUFBRUgsZ0JBQWdCRSxNQUFNLEdBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktcGRmLXR1dG9yLy4vbGliL2RiLnRzPzFkZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSBcIkBwcmlzbWEvY2xpZW50XCI7XG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCgpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hO1xuXG5cbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/pdf-chunking.ts":
/*!*****************************!*\
  !*** ./lib/pdf-chunking.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractAndSaveChunks: () => (/* binding */ extractAndSaveChunks)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n/* harmony import */ var _lib_vector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/vector */ \"(rsc)/./lib/vector.ts\");\n\n\n\n\n// Use pdfjs-dist for server-side PDF processing with bounding boxes\nconst pdfjsLib = __webpack_require__(/*! pdfjs-dist/legacy/build/pdf */ \"(rsc)/./node_modules/pdfjs-dist/legacy/build/pdf.mjs\");\n// Configure PDF.js for server-side usage without workers\n// Completely disable worker for server-side processing\npdfjsLib.GlobalWorkerOptions.workerSrc = \"/Users/gaureesh/StudyFetch/AiTutor/node_modules/pdfjs-dist/legacy/build/pdf.worker.min.mjs\";\n// Semantic chunking function with bounding box tracking\nfunction chunkByLines(items, maxChars = 500, lineGap = 5) {\n    const chunks = [];\n    let buffer = \"\";\n    let bbox = null;\n    let lastY = null;\n    const flush = ()=>{\n        if (buffer.trim().length > 0) {\n            chunks.push({\n                text: buffer.trim(),\n                bbox\n            });\n            buffer = \"\";\n            bbox = null;\n        }\n    };\n    items.forEach((item)=>{\n        const [a, b, c, d, e, f] = item.transform;\n        const fontHeight = Math.sqrt(b * b + d * d);\n        const currentBbox = {\n            x: e,\n            y: f,\n            width: item.width,\n            height: fontHeight\n        };\n        if (!bbox) bbox = {\n            ...currentBbox\n        };\n        else {\n            bbox.x = Math.min(bbox.x, currentBbox.x);\n            bbox.y = Math.min(bbox.y, currentBbox.y);\n            bbox.width = Math.max(bbox.width, currentBbox.x + currentBbox.width - bbox.x);\n            bbox.height = Math.max(bbox.height, currentBbox.y + currentBbox.height - bbox.y);\n        }\n        if (lastY !== null && Math.abs(f - lastY) > lineGap) buffer += \"\\n\";\n        lastY = f;\n        buffer += item.str;\n        if (buffer.length >= maxChars) flush();\n    });\n    flush();\n    return chunks;\n}\nasync function extractAndSaveChunks(pdfId) {\n    try {\n        // Get PDF metadata from database\n        const pdf = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.prisma.pDF.findUnique({\n            where: {\n                id: pdfId\n            }\n        });\n        if (!pdf) {\n            return {\n                success: false,\n                totalChunks: 0,\n                totalPages: 0,\n                error: \"PDF not found\"\n            };\n        }\n        // Extract text chunks with bounding boxes using pdfjs-dist\n        let allChunks = [];\n        let pdfDoc;\n        try {\n            const uploadDir = process.env.UPLOAD_DIR || \"./uploads\";\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), uploadDir, `${pdfId}.pdf`);\n            // Read PDF file\n            const pdfBuffer = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(filePath);\n            // Convert Buffer to Uint8Array for PDF.js\n            const uint8Array = new Uint8Array(pdfBuffer);\n            // Load PDF document using PDF.js (with bounding box support)\n            const loadingTask = pdfjsLib.getDocument({\n                data: uint8Array,\n                useWorkerFetch: false,\n                disableWorker: true // Explicitly disable worker\n            });\n            pdfDoc = await loadingTask.promise;\n            // Extract chunks from all pages with bounding boxes\n            for(let i = 1; i <= pdfDoc.numPages; i++){\n                const page = await pdfDoc.getPage(i);\n                const textContent = await page.getTextContent();\n                // Use semantic chunking function that preserves bounding boxes\n                const chunks = chunkByLines(textContent.items, 500);\n                chunks.forEach((chunk)=>allChunks.push({\n                        ...chunk,\n                        page: i\n                    }));\n            }\n            console.log(`Extracted ${allChunks.length} chunks from PDF ${pdfId}`);\n            // Delete existing chunks for this PDF from vector database\n            try {\n                await (0,_lib_vector__WEBPACK_IMPORTED_MODULE_3__.deleteAllChunksForPDF)(pdfId);\n                console.log(`Deleted existing chunks for PDF ${pdfId} from vector database`);\n            } catch (error) {\n                console.warn(`Warning: Could not delete existing chunks from vector database:`, error);\n            }\n            // Save chunks to database and generate embeddings\n            const savedChunks = await Promise.all(allChunks.map(async (chunk, index)=>{\n                const chunkId = `${pdfId}-${chunk.page}-${index}`;\n                // Generate embedding for the chunk\n                let embedding = [];\n                try {\n                    embedding = await (0,_lib_vector__WEBPACK_IMPORTED_MODULE_3__.generateEmbedding)(chunk.text);\n                    console.log(`Generated embedding for chunk ${chunkId}`);\n                } catch (error) {\n                    console.error(`Failed to generate embedding for chunk ${chunkId}:`, error);\n                }\n                // Save to database\n                const savedChunk = await _lib_db__WEBPACK_IMPORTED_MODULE_2__.prisma.pDFChunk.upsert({\n                    where: {\n                        pdfId_pageNumber_chunkIndex: {\n                            pdfId: pdfId,\n                            pageNumber: chunk.page,\n                            chunkIndex: index\n                        }\n                    },\n                    update: {\n                        text: chunk.text,\n                        bboxX: chunk.bbox.x,\n                        bboxY: chunk.bbox.y,\n                        bboxWidth: chunk.bbox.width,\n                        bboxHeight: chunk.bbox.height,\n                        textLength: chunk.text.length,\n                        vectorId: embedding.length > 0 ? chunkId : null,\n                        updatedAt: new Date()\n                    },\n                    create: {\n                        pdfId: pdfId,\n                        pageNumber: chunk.page,\n                        chunkIndex: index,\n                        text: chunk.text,\n                        bboxX: chunk.bbox.x,\n                        bboxY: chunk.bbox.y,\n                        bboxWidth: chunk.bbox.width,\n                        bboxHeight: chunk.bbox.height,\n                        textLength: chunk.text.length,\n                        vectorId: embedding.length > 0 ? chunkId : null\n                    }\n                });\n                return {\n                    ...savedChunk,\n                    embedding,\n                    bbox: chunk.bbox\n                };\n            }));\n            console.log(`Saved ${savedChunks.length} chunks to database`);\n            // Prepare chunks for vector database\n            const chunksForVectorDB = savedChunks.filter((chunk)=>chunk.embedding.length > 0).map((chunk)=>({\n                    id: `${pdfId}-${chunk.pageNumber}-${chunk.chunkIndex}`,\n                    text: chunk.text,\n                    embedding: chunk.embedding,\n                    metadata: {\n                        pdfId: pdfId,\n                        pdfName: pdf.originalName,\n                        pageNumber: chunk.pageNumber,\n                        chunkIndex: chunk.chunkIndex,\n                        textLength: chunk.textLength,\n                        bboxX: chunk.bboxX,\n                        bboxY: chunk.bboxY,\n                        bboxWidth: chunk.bboxWidth,\n                        bboxHeight: chunk.bboxHeight,\n                        createdAt: chunk.createdAt.toISOString()\n                    }\n                }));\n            // Upsert to vector database\n            if (chunksForVectorDB.length > 0) {\n                try {\n                    await (0,_lib_vector__WEBPACK_IMPORTED_MODULE_3__.upsertChunksToVectorDB)(chunksForVectorDB);\n                    console.log(`Successfully upserted ${chunksForVectorDB.length} chunks to vector database`);\n                } catch (error) {\n                    console.error(`Failed to upsert chunks to vector database:`, error);\n                // Don't fail the entire operation if vector DB fails\n                }\n            }\n        } catch (error) {\n            console.error(\"Error extracting PDF chunks:\", error);\n            return {\n                success: false,\n                totalChunks: 0,\n                totalPages: 0,\n                error: \"Failed to extract PDF chunks\"\n            };\n        }\n        return {\n            success: true,\n            totalChunks: allChunks.length,\n            totalPages: pdfDoc.numPages\n        };\n    } catch (error) {\n        console.error(\"Chunks extraction error:\", error);\n        return {\n            success: false,\n            totalChunks: 0,\n            totalPages: 0,\n            error: \"Internal server error\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/pdf-chunking.ts\n");

/***/ }),

/***/ "(rsc)/./lib/vector.ts":
/*!***********************!*\
  !*** ./lib/vector.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteAllChunksForPDF: () => (/* binding */ deleteAllChunksForPDF),\n/* harmony export */   deleteChunksFromVectorDB: () => (/* binding */ deleteChunksFromVectorDB),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding),\n/* harmony export */   getOpenAIClient: () => (/* binding */ getOpenAIClient),\n/* harmony export */   getPineconeClient: () => (/* binding */ getPineconeClient),\n/* harmony export */   getVectorDB: () => (/* binding */ getVectorDB),\n/* harmony export */   searchSimilarChunks: () => (/* binding */ searchSimilarChunks),\n/* harmony export */   upsertChunksToVectorDB: () => (/* binding */ upsertChunksToVectorDB)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @pinecone-database/pinecone */ \"(rsc)/./node_modules/@pinecone-database/pinecone/dist/index.js\");\n/* harmony import */ var _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Initialize OpenAI client\nlet openai = null;\nfunction getOpenAIClient() {\n    if (!openai) {\n        if (!process.env.OPENAI_API_KEY) {\n            throw new Error(\"OPENAI_API_KEY is not set\");\n        }\n        openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n            apiKey: process.env.OPENAI_API_KEY\n        });\n    }\n    return openai;\n}\n// Initialize Pinecone client\nlet pinecone = null;\nfunction getPineconeClient() {\n    if (!pinecone) {\n        if (!process.env.PINECONE_API_KEY) {\n            throw new Error(\"PINECONE_API_KEY is not set\");\n        }\n        pinecone = new _pinecone_database_pinecone__WEBPACK_IMPORTED_MODULE_0__.Pinecone({\n            apiKey: process.env.PINECONE_API_KEY\n        });\n    }\n    return pinecone;\n}\n// Pinecone-based vector database\nclass PineconeVectorDB {\n    constructor(){\n        this.indexName = process.env.PINECONE_INDEX_NAME || \"ai-pdf-tutor\";\n    }\n    async initialize() {\n        const client = getPineconeClient();\n        try {\n            // Check if index exists\n            const indexList = await client.listIndexes();\n            const indexExists = indexList.indexes?.some((index)=>index.name === this.indexName);\n            if (!indexExists) {\n                console.log(`Creating Pinecone index: ${this.indexName}`);\n                await client.createIndex({\n                    name: this.indexName,\n                    dimension: 1536,\n                    metric: \"cosine\",\n                    spec: {\n                        serverless: {\n                            cloud: \"aws\",\n                            region: \"us-east-1\"\n                        }\n                    }\n                });\n                // Wait for index to be ready\n                console.log(\"Waiting for index to be ready...\");\n                await this.waitForIndexReady();\n            } else {\n                console.log(`Pinecone index ${this.indexName} already exists`);\n            }\n        } catch (error) {\n            console.error(\"Error initializing Pinecone:\", error);\n            throw error;\n        }\n    }\n    async waitForIndexReady() {\n        const client = getPineconeClient();\n        const maxRetries = 30;\n        let retries = 0;\n        while(retries < maxRetries){\n            try {\n                const indexDescription = await client.describeIndex(this.indexName);\n                if (indexDescription.status?.ready) {\n                    console.log(`Index ${this.indexName} is ready!`);\n                    return;\n                }\n                console.log(`Index not ready yet, waiting... (${retries + 1}/${maxRetries})`);\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n                retries++;\n            } catch (error) {\n                console.log(`Error checking index status: ${error}`);\n                await new Promise((resolve)=>setTimeout(resolve, 2000));\n                retries++;\n            }\n        }\n        throw new Error(`Index ${this.indexName} did not become ready within ${maxRetries * 2} seconds`);\n    }\n    async upsert(chunks) {\n        const client = getPineconeClient();\n        const index = client.index(this.indexName);\n        try {\n            const vectors = chunks.map((chunk)=>({\n                    id: chunk.id,\n                    values: chunk.embedding,\n                    metadata: {\n                        pdfId: chunk.metadata.pdfId,\n                        pdfName: chunk.metadata.pdfName,\n                        pageNumber: chunk.metadata.pageNumber,\n                        chunkIndex: chunk.metadata.chunkIndex,\n                        textLength: chunk.metadata.textLength,\n                        bboxX: chunk.metadata.bboxX,\n                        bboxY: chunk.metadata.bboxY,\n                        bboxWidth: chunk.metadata.bboxWidth,\n                        bboxHeight: chunk.metadata.bboxHeight,\n                        createdAt: chunk.metadata.createdAt,\n                        text: chunk.text // Include text for easy access\n                    }\n                }));\n            await index.upsert(vectors);\n            console.log(`Successfully upserted ${chunks.length} chunks to Pinecone`);\n        } catch (error) {\n            console.error(\"Error upserting to Pinecone:\", error);\n            throw error;\n        }\n    }\n    async search(queryEmbedding, pdfId, topK = 5) {\n        const client = getPineconeClient();\n        const index = client.index(this.indexName);\n        try {\n            const searchRequest = {\n                vector: queryEmbedding,\n                topK: topK,\n                includeMetadata: true,\n                includeValues: false\n            };\n            // Add PDF filter if specified\n            if (pdfId) {\n                searchRequest.filter = {\n                    pdfId: {\n                        $eq: pdfId\n                    }\n                };\n            }\n            const searchResponse = await index.query(searchRequest);\n            const results = searchResponse.matches?.map((match)=>({\n                    id: match.id,\n                    text: match.metadata?.text || \"\",\n                    embedding: queryEmbedding,\n                    metadata: {\n                        pdfId: match.metadata?.pdfId || \"\",\n                        pdfName: match.metadata?.pdfName || \"\",\n                        pageNumber: match.metadata?.pageNumber || 0,\n                        chunkIndex: match.metadata?.chunkIndex || 0,\n                        textLength: match.metadata?.textLength || 0,\n                        bboxX: match.metadata?.bboxX || 0,\n                        bboxY: match.metadata?.bboxY || 0,\n                        bboxWidth: match.metadata?.bboxWidth || 0,\n                        bboxHeight: match.metadata?.bboxHeight || 0,\n                        createdAt: match.metadata?.createdAt || \"\",\n                        similarity: match.score || 0\n                    }\n                })) || [];\n            return results;\n        } catch (error) {\n            console.error(\"Error searching Pinecone:\", error);\n            throw error;\n        }\n    }\n    async deleteByPdfId(pdfId) {\n        const client = getPineconeClient();\n        const index = client.index(this.indexName);\n        try {\n            // Pinecone doesn't support filtering in delete operations\n            // We need to query first to get the IDs, then delete\n            const searchResponse = await index.query({\n                vector: new Array(1536).fill(0),\n                topK: 10000,\n                filter: {\n                    pdfId: {\n                        $eq: pdfId\n                    }\n                },\n                includeMetadata: true,\n                includeValues: false\n            });\n            if (searchResponse.matches && searchResponse.matches.length > 0) {\n                const idsToDelete = searchResponse.matches.map((match)=>match.id);\n                await index.deleteMany(idsToDelete);\n                console.log(`Deleted ${idsToDelete.length} chunks for PDF ${pdfId} from Pinecone`);\n            }\n        } catch (error) {\n            console.error(\"Error deleting from Pinecone:\", error);\n            throw error;\n        }\n    }\n    async deleteByIds(ids) {\n        const client = getPineconeClient();\n        const index = client.index(this.indexName);\n        try {\n            await index.deleteMany(ids);\n            console.log(`Successfully deleted ${ids.length} chunks from Pinecone`);\n        } catch (error) {\n            console.error(\"Error deleting from Pinecone:\", error);\n            throw error;\n        }\n    }\n}\n// Global vector database instance\nlet vectorDB = null;\nasync function getVectorDB() {\n    if (!vectorDB) {\n        vectorDB = new PineconeVectorDB();\n        await vectorDB.initialize();\n    }\n    return vectorDB;\n}\nasync function generateEmbedding(text) {\n    const openai = getOpenAIClient();\n    try {\n        const response = await openai.embeddings.create({\n            model: \"text-embedding-3-small\",\n            input: text\n        });\n        return response.data[0].embedding;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw new Error(\"Failed to generate embedding\");\n    }\n}\nasync function upsertChunksToVectorDB(chunks) {\n    const vectorDB = await getVectorDB();\n    try {\n        await vectorDB.upsert(chunks);\n        console.log(`Successfully upserted ${chunks.length} chunks to vector database`);\n    } catch (error) {\n        console.error(\"Error upserting to vector database:\", error);\n        throw new Error(\"Failed to upsert chunks to vector database\");\n    }\n}\nasync function searchSimilarChunks(query, pdfId, topK = 5) {\n    const vectorDB = await getVectorDB();\n    try {\n        // Generate embedding for the query\n        const queryEmbedding = await generateEmbedding(query);\n        // Search for similar chunks\n        const results = await vectorDB.search(queryEmbedding, pdfId, topK);\n        return results;\n    } catch (error) {\n        console.error(\"Error searching vector database:\", error);\n        throw new Error(\"Failed to search vector database\");\n    }\n}\nasync function deleteChunksFromVectorDB(chunkIds) {\n    const vectorDB = await getVectorDB();\n    try {\n        await vectorDB.deleteByIds(chunkIds);\n        console.log(`Successfully deleted ${chunkIds.length} chunks from vector database`);\n    } catch (error) {\n        console.error(\"Error deleting from vector database:\", error);\n        throw new Error(\"Failed to delete chunks from vector database\");\n    }\n}\nasync function deleteAllChunksForPDF(pdfId) {\n    const vectorDB = await getVectorDB();\n    try {\n        await vectorDB.deleteByPdfId(pdfId);\n        console.log(`Successfully deleted all chunks for PDF ${pdfId} from vector database`);\n    } catch (error) {\n        console.error(\"Error deleting PDF chunks from vector database:\", error);\n        throw new Error(\"Failed to delete PDF chunks from vector database\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7SUFFaEIsTUFBTXFCLFdBQVcsTUFBTUM7SUFFdkIsSUFBSTtRQUNGLG1DQUFtQztRQUNuQyxNQUFNdkIsaUJBQWlCLE1BQU13QixrQkFBa0JmO1FBRS9DLDRCQUE0QjtRQUM1QixNQUFNQyxVQUFVLE1BQU1ZLFNBQVN2QixNQUFNLENBQUNDLGdCQUFnQmIsT0FBT2M7UUFFN0QsT0FBT1M7SUFDVCxFQUFFLE9BQU8xQyxPQUFPO1FBQ2RWLFFBQVFVLEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE1BQU0sSUFBSTVCLE1BQU07SUFDbEI7QUFDRjtBQUVPLGVBQWU2Rix5QkFBeUJDLFFBQWtCO0lBQy9ELE1BQU1aLFdBQVcsTUFBTUM7SUFFdkIsSUFBSTtRQUNGLE1BQU1ELFNBQVNGLFdBQVcsQ0FBQ2M7UUFDM0I1RSxRQUFRQyxHQUFHLENBQUMsQ0FBQyxxQkFBcUIsRUFBRTJFLFNBQVNwQyxNQUFNLENBQUMsNEJBQTRCLENBQUM7SUFDbkYsRUFBRSxPQUFPOUIsT0FBTztRQUNkVixRQUFRVSxLQUFLLENBQUMsd0NBQXdDQTtRQUN0RCxNQUFNLElBQUk1QixNQUFNO0lBQ2xCO0FBQ0Y7QUFFTyxlQUFlK0Ysc0JBQXNCaEQsS0FBYTtJQUN2RCxNQUFNbUMsV0FBVyxNQUFNQztJQUV2QixJQUFJO1FBQ0YsTUFBTUQsU0FBU1AsYUFBYSxDQUFDNUI7UUFDN0I3QixRQUFRQyxHQUFHLENBQUMsQ0FBQyx3Q0FBd0MsRUFBRTRCLE1BQU0scUJBQXFCLENBQUM7SUFDckYsRUFBRSxPQUFPbkIsT0FBTztRQUNkVixRQUFRVSxLQUFLLENBQUMsbURBQW1EQTtRQUNqRSxNQUFNLElBQUk1QixNQUFNO0lBQ2xCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1wZGYtdHV0b3IvLi9saWIvdmVjdG9yLnRzP2Q2MGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknO1xuaW1wb3J0IHsgUGluZWNvbmUgfSBmcm9tICdAcGluZWNvbmUtZGF0YWJhc2UvcGluZWNvbmUnO1xuXG4vLyBJbml0aWFsaXplIE9wZW5BSSBjbGllbnRcbmxldCBvcGVuYWk6IE9wZW5BSSB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlbkFJQ2xpZW50KCk6IE9wZW5BSSB7XG4gIGlmICghb3BlbmFpKSB7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPUEVOQUlfQVBJX0tFWSBpcyBub3Qgc2V0Jyk7XG4gICAgfVxuICAgIFxuICAgIG9wZW5haSA9IG5ldyBPcGVuQUkoe1xuICAgICAgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3BlbmFpO1xufVxuXG4vLyBJbml0aWFsaXplIFBpbmVjb25lIGNsaWVudFxubGV0IHBpbmVjb25lOiBQaW5lY29uZSB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGluZWNvbmVDbGllbnQoKTogUGluZWNvbmUge1xuICBpZiAoIXBpbmVjb25lKSB7XG4gICAgaWYgKCFwcm9jZXNzLmVudi5QSU5FQ09ORV9BUElfS0VZKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BJTkVDT05FX0FQSV9LRVkgaXMgbm90IHNldCcpO1xuICAgIH1cbiAgICBcbiAgICBwaW5lY29uZSA9IG5ldyBQaW5lY29uZSh7XG4gICAgICBhcGlLZXk6IHByb2Nlc3MuZW52LlBJTkVDT05FX0FQSV9LRVksXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBpbmVjb25lO1xufVxuXG4vLyBQaW5lY29uZS1iYXNlZCB2ZWN0b3IgZGF0YWJhc2VcbmNsYXNzIFBpbmVjb25lVmVjdG9yREIge1xuICBwcml2YXRlIGluZGV4TmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5kZXhOYW1lID0gcHJvY2Vzcy5lbnYuUElORUNPTkVfSU5ERVhfTkFNRSB8fCAnYWktcGRmLXR1dG9yJztcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UGluZWNvbmVDbGllbnQoKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgaW5kZXggZXhpc3RzXG4gICAgICBjb25zdCBpbmRleExpc3QgPSBhd2FpdCBjbGllbnQubGlzdEluZGV4ZXMoKTtcbiAgICAgIGNvbnN0IGluZGV4RXhpc3RzID0gaW5kZXhMaXN0LmluZGV4ZXM/LnNvbWUoaW5kZXggPT4gaW5kZXgubmFtZSA9PT0gdGhpcy5pbmRleE5hbWUpO1xuICAgICAgXG4gICAgICBpZiAoIWluZGV4RXhpc3RzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBDcmVhdGluZyBQaW5lY29uZSBpbmRleDogJHt0aGlzLmluZGV4TmFtZX1gKTtcbiAgICAgICAgYXdhaXQgY2xpZW50LmNyZWF0ZUluZGV4KHtcbiAgICAgICAgICBuYW1lOiB0aGlzLmluZGV4TmFtZSxcbiAgICAgICAgICBkaW1lbnNpb246IDE1MzYsIC8vIE9wZW5BSSB0ZXh0LWVtYmVkZGluZy0zLXNtYWxsIGRpbWVuc2lvblxuICAgICAgICAgIG1ldHJpYzogJ2Nvc2luZScsXG4gICAgICAgICAgc3BlYzoge1xuICAgICAgICAgICAgc2VydmVybGVzczoge1xuICAgICAgICAgICAgICBjbG91ZDogJ2F3cycsXG4gICAgICAgICAgICAgIHJlZ2lvbjogJ3VzLWVhc3QtMSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gV2FpdCBmb3IgaW5kZXggdG8gYmUgcmVhZHlcbiAgICAgICAgY29uc29sZS5sb2coJ1dhaXRpbmcgZm9yIGluZGV4IHRvIGJlIHJlYWR5Li4uJyk7XG4gICAgICAgIGF3YWl0IHRoaXMud2FpdEZvckluZGV4UmVhZHkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBQaW5lY29uZSBpbmRleCAke3RoaXMuaW5kZXhOYW1lfSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbml0aWFsaXppbmcgUGluZWNvbmU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB3YWl0Rm9ySW5kZXhSZWFkeSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjbGllbnQgPSBnZXRQaW5lY29uZUNsaWVudCgpO1xuICAgIGNvbnN0IG1heFJldHJpZXMgPSAzMDtcbiAgICBsZXQgcmV0cmllcyA9IDA7XG4gICAgXG4gICAgd2hpbGUgKHJldHJpZXMgPCBtYXhSZXRyaWVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBpbmRleERlc2NyaXB0aW9uID0gYXdhaXQgY2xpZW50LmRlc2NyaWJlSW5kZXgodGhpcy5pbmRleE5hbWUpO1xuICAgICAgICBpZiAoaW5kZXhEZXNjcmlwdGlvbi5zdGF0dXM/LnJlYWR5KSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYEluZGV4ICR7dGhpcy5pbmRleE5hbWV9IGlzIHJlYWR5IWApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgSW5kZXggbm90IHJlYWR5IHlldCwgd2FpdGluZy4uLiAoJHtyZXRyaWVzICsgMX0vJHttYXhSZXRyaWVzfSlgKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDApKTtcbiAgICAgICAgcmV0cmllcysrO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGNoZWNraW5nIGluZGV4IHN0YXR1czogJHtlcnJvcn1gKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDApKTtcbiAgICAgICAgcmV0cmllcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEluZGV4ICR7dGhpcy5pbmRleE5hbWV9IGRpZCBub3QgYmVjb21lIHJlYWR5IHdpdGhpbiAke21heFJldHJpZXMgKiAyfSBzZWNvbmRzYCk7XG4gIH1cblxuICBhc3luYyB1cHNlcnQoY2h1bmtzOiBDaHVua0VtYmVkZGluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UGluZWNvbmVDbGllbnQoKTtcbiAgICBjb25zdCBpbmRleCA9IGNsaWVudC5pbmRleCh0aGlzLmluZGV4TmFtZSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZlY3RvcnMgPSBjaHVua3MubWFwKGNodW5rID0+ICh7XG4gICAgICAgIGlkOiBjaHVuay5pZCxcbiAgICAgICAgdmFsdWVzOiBjaHVuay5lbWJlZGRpbmcsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgcGRmSWQ6IGNodW5rLm1ldGFkYXRhLnBkZklkLFxuICAgICAgICAgIHBkZk5hbWU6IGNodW5rLm1ldGFkYXRhLnBkZk5hbWUsXG4gICAgICAgICAgcGFnZU51bWJlcjogY2h1bmsubWV0YWRhdGEucGFnZU51bWJlcixcbiAgICAgICAgICBjaHVua0luZGV4OiBjaHVuay5tZXRhZGF0YS5jaHVua0luZGV4LFxuICAgICAgICAgIHRleHRMZW5ndGg6IGNodW5rLm1ldGFkYXRhLnRleHRMZW5ndGgsXG4gICAgICAgICAgYmJveFg6IGNodW5rLm1ldGFkYXRhLmJib3hYLFxuICAgICAgICAgIGJib3hZOiBjaHVuay5tZXRhZGF0YS5iYm94WSxcbiAgICAgICAgICBiYm94V2lkdGg6IGNodW5rLm1ldGFkYXRhLmJib3hXaWR0aCxcbiAgICAgICAgICBiYm94SGVpZ2h0OiBjaHVuay5tZXRhZGF0YS5iYm94SGVpZ2h0LFxuICAgICAgICAgIGNyZWF0ZWRBdDogY2h1bmsubWV0YWRhdGEuY3JlYXRlZEF0LFxuICAgICAgICAgIHRleHQ6IGNodW5rLnRleHQgLy8gSW5jbHVkZSB0ZXh0IGZvciBlYXN5IGFjY2Vzc1xuICAgICAgICB9XG4gICAgICB9KSk7XG5cbiAgICAgIGF3YWl0IGluZGV4LnVwc2VydCh2ZWN0b3JzKTtcbiAgICAgIGNvbnNvbGUubG9nKGBTdWNjZXNzZnVsbHkgdXBzZXJ0ZWQgJHtjaHVua3MubGVuZ3RofSBjaHVua3MgdG8gUGluZWNvbmVgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBzZXJ0aW5nIHRvIFBpbmVjb25lOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNlYXJjaChxdWVyeUVtYmVkZGluZzogbnVtYmVyW10sIHBkZklkPzogc3RyaW5nLCB0b3BLOiBudW1iZXIgPSA1KTogUHJvbWlzZTxDaHVua0VtYmVkZGluZ1tdPiB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UGluZWNvbmVDbGllbnQoKTtcbiAgICBjb25zdCBpbmRleCA9IGNsaWVudC5pbmRleCh0aGlzLmluZGV4TmFtZSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNlYXJjaFJlcXVlc3Q6IGFueSA9IHtcbiAgICAgICAgdmVjdG9yOiBxdWVyeUVtYmVkZGluZyxcbiAgICAgICAgdG9wSzogdG9wSyxcbiAgICAgICAgaW5jbHVkZU1ldGFkYXRhOiB0cnVlLFxuICAgICAgICBpbmNsdWRlVmFsdWVzOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgLy8gQWRkIFBERiBmaWx0ZXIgaWYgc3BlY2lmaWVkXG4gICAgICBpZiAocGRmSWQpIHtcbiAgICAgICAgc2VhcmNoUmVxdWVzdC5maWx0ZXIgPSB7XG4gICAgICAgICAgcGRmSWQ6IHsgJGVxOiBwZGZJZCB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNlYXJjaFJlc3BvbnNlID0gYXdhaXQgaW5kZXgucXVlcnkoc2VhcmNoUmVxdWVzdCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdHM6IENodW5rRW1iZWRkaW5nW10gPSBzZWFyY2hSZXNwb25zZS5tYXRjaGVzPy5tYXAobWF0Y2ggPT4gKHtcbiAgICAgICAgaWQ6IG1hdGNoLmlkLFxuICAgICAgICB0ZXh0OiBtYXRjaC5tZXRhZGF0YT8udGV4dCBhcyBzdHJpbmcgfHwgJycsXG4gICAgICAgIGVtYmVkZGluZzogcXVlcnlFbWJlZGRpbmcsIC8vIFdlIGRvbid0IHN0b3JlIHRoZSBvcmlnaW5hbCBlbWJlZGRpbmcgaW4gcmVzdWx0c1xuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIHBkZklkOiBtYXRjaC5tZXRhZGF0YT8ucGRmSWQgYXMgc3RyaW5nIHx8ICcnLFxuICAgICAgICAgIHBkZk5hbWU6IG1hdGNoLm1ldGFkYXRhPy5wZGZOYW1lIGFzIHN0cmluZyB8fCAnJyxcbiAgICAgICAgICBwYWdlTnVtYmVyOiBtYXRjaC5tZXRhZGF0YT8ucGFnZU51bWJlciBhcyBudW1iZXIgfHwgMCxcbiAgICAgICAgICBjaHVua0luZGV4OiBtYXRjaC5tZXRhZGF0YT8uY2h1bmtJbmRleCBhcyBudW1iZXIgfHwgMCxcbiAgICAgICAgICB0ZXh0TGVuZ3RoOiBtYXRjaC5tZXRhZGF0YT8udGV4dExlbmd0aCBhcyBudW1iZXIgfHwgMCxcbiAgICAgICAgICBiYm94WDogbWF0Y2gubWV0YWRhdGE/LmJib3hYIGFzIG51bWJlciB8fCAwLFxuICAgICAgICAgIGJib3hZOiBtYXRjaC5tZXRhZGF0YT8uYmJveFkgYXMgbnVtYmVyIHx8IDAsXG4gICAgICAgICAgYmJveFdpZHRoOiBtYXRjaC5tZXRhZGF0YT8uYmJveFdpZHRoIGFzIG51bWJlciB8fCAwLFxuICAgICAgICAgIGJib3hIZWlnaHQ6IG1hdGNoLm1ldGFkYXRhPy5iYm94SGVpZ2h0IGFzIG51bWJlciB8fCAwLFxuICAgICAgICAgIGNyZWF0ZWRBdDogbWF0Y2gubWV0YWRhdGE/LmNyZWF0ZWRBdCBhcyBzdHJpbmcgfHwgJycsXG4gICAgICAgICAgc2ltaWxhcml0eTogbWF0Y2guc2NvcmUgfHwgMFxuICAgICAgICB9XG4gICAgICB9KSkgfHwgW107XG5cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmcgUGluZWNvbmU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlQnlQZGZJZChwZGZJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UGluZWNvbmVDbGllbnQoKTtcbiAgICBjb25zdCBpbmRleCA9IGNsaWVudC5pbmRleCh0aGlzLmluZGV4TmFtZSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIFBpbmVjb25lIGRvZXNuJ3Qgc3VwcG9ydCBmaWx0ZXJpbmcgaW4gZGVsZXRlIG9wZXJhdGlvbnNcbiAgICAgIC8vIFdlIG5lZWQgdG8gcXVlcnkgZmlyc3QgdG8gZ2V0IHRoZSBJRHMsIHRoZW4gZGVsZXRlXG4gICAgICBjb25zdCBzZWFyY2hSZXNwb25zZSA9IGF3YWl0IGluZGV4LnF1ZXJ5KHtcbiAgICAgICAgdmVjdG9yOiBuZXcgQXJyYXkoMTUzNikuZmlsbCgwKSwgLy8gRHVtbXkgdmVjdG9yXG4gICAgICAgIHRvcEs6IDEwMDAwLCAvLyBMYXJnZSBudW1iZXIgdG8gZ2V0IGFsbCB2ZWN0b3JzXG4gICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgIHBkZklkOiB7ICRlcTogcGRmSWQgfVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlTWV0YWRhdGE6IHRydWUsXG4gICAgICAgIGluY2x1ZGVWYWx1ZXM6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgaWYgKHNlYXJjaFJlc3BvbnNlLm1hdGNoZXMgJiYgc2VhcmNoUmVzcG9uc2UubWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGlkc1RvRGVsZXRlID0gc2VhcmNoUmVzcG9uc2UubWF0Y2hlcy5tYXAobWF0Y2ggPT4gbWF0Y2guaWQpO1xuICAgICAgICBhd2FpdCBpbmRleC5kZWxldGVNYW55KGlkc1RvRGVsZXRlKTtcbiAgICAgICAgY29uc29sZS5sb2coYERlbGV0ZWQgJHtpZHNUb0RlbGV0ZS5sZW5ndGh9IGNodW5rcyBmb3IgUERGICR7cGRmSWR9IGZyb20gUGluZWNvbmVgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgZnJvbSBQaW5lY29uZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBkZWxldGVCeUlkcyhpZHM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0UGluZWNvbmVDbGllbnQoKTtcbiAgICBjb25zdCBpbmRleCA9IGNsaWVudC5pbmRleCh0aGlzLmluZGV4TmFtZSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGluZGV4LmRlbGV0ZU1hbnkoaWRzKTtcbiAgICAgIGNvbnNvbGUubG9nKGBTdWNjZXNzZnVsbHkgZGVsZXRlZCAke2lkcy5sZW5ndGh9IGNodW5rcyBmcm9tIFBpbmVjb25lYCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIGZyb20gUGluZWNvbmU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG5cbi8vIEdsb2JhbCB2ZWN0b3IgZGF0YWJhc2UgaW5zdGFuY2VcbmxldCB2ZWN0b3JEQjogUGluZWNvbmVWZWN0b3JEQiB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmVjdG9yREIoKTogUHJvbWlzZTxQaW5lY29uZVZlY3RvckRCPiB7XG4gIGlmICghdmVjdG9yREIpIHtcbiAgICB2ZWN0b3JEQiA9IG5ldyBQaW5lY29uZVZlY3RvckRCKCk7XG4gICAgYXdhaXQgdmVjdG9yREIuaW5pdGlhbGl6ZSgpO1xuICB9XG4gIHJldHVybiB2ZWN0b3JEQjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaHVua0VtYmVkZGluZyB7XG4gIGlkOiBzdHJpbmc7XG4gIHRleHQ6IHN0cmluZztcbiAgZW1iZWRkaW5nOiBudW1iZXJbXTtcbiAgbWV0YWRhdGE6IHtcbiAgICBwZGZJZDogc3RyaW5nO1xuICAgIHBkZk5hbWU6IHN0cmluZztcbiAgICBwYWdlTnVtYmVyOiBudW1iZXI7XG4gICAgY2h1bmtJbmRleDogbnVtYmVyO1xuICAgIHRleHRMZW5ndGg6IG51bWJlcjtcbiAgICBiYm94WDogbnVtYmVyO1xuICAgIGJib3hZOiBudW1iZXI7XG4gICAgYmJveFdpZHRoOiBudW1iZXI7XG4gICAgYmJveEhlaWdodDogbnVtYmVyO1xuICAgIGNyZWF0ZWRBdDogc3RyaW5nO1xuICAgIHNpbWlsYXJpdHk/OiBudW1iZXI7XG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XG4gIGNvbnN0IG9wZW5haSA9IGdldE9wZW5BSUNsaWVudCgpO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9wZW5haS5lbWJlZGRpbmdzLmNyZWF0ZSh7XG4gICAgICBtb2RlbDogJ3RleHQtZW1iZWRkaW5nLTMtc21hbGwnLCAvLyBDb3N0LWVmZmVjdGl2ZSBlbWJlZGRpbmcgbW9kZWxcbiAgICAgIGlucHV0OiB0ZXh0LFxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiByZXNwb25zZS5kYXRhWzBdLmVtYmVkZGluZztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgZW1iZWRkaW5nJyk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwc2VydENodW5rc1RvVmVjdG9yREIoY2h1bmtzOiBDaHVua0VtYmVkZGluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHZlY3RvckRCID0gYXdhaXQgZ2V0VmVjdG9yREIoKTtcbiAgXG4gIHRyeSB7XG4gICAgYXdhaXQgdmVjdG9yREIudXBzZXJ0KGNodW5rcyk7XG4gICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSB1cHNlcnRlZCAke2NodW5rcy5sZW5ndGh9IGNodW5rcyB0byB2ZWN0b3IgZGF0YWJhc2VgKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cHNlcnRpbmcgdG8gdmVjdG9yIGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byB1cHNlcnQgY2h1bmtzIHRvIHZlY3RvciBkYXRhYmFzZScpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hTaW1pbGFyQ2h1bmtzKFxuICBxdWVyeTogc3RyaW5nLFxuICBwZGZJZD86IHN0cmluZyxcbiAgdG9wSzogbnVtYmVyID0gNVxuKTogUHJvbWlzZTxDaHVua0VtYmVkZGluZ1tdPiB7XG4gIGNvbnN0IHZlY3RvckRCID0gYXdhaXQgZ2V0VmVjdG9yREIoKTtcbiAgXG4gIHRyeSB7XG4gICAgLy8gR2VuZXJhdGUgZW1iZWRkaW5nIGZvciB0aGUgcXVlcnlcbiAgICBjb25zdCBxdWVyeUVtYmVkZGluZyA9IGF3YWl0IGdlbmVyYXRlRW1iZWRkaW5nKHF1ZXJ5KTtcbiAgICBcbiAgICAvLyBTZWFyY2ggZm9yIHNpbWlsYXIgY2h1bmtzXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHZlY3RvckRCLnNlYXJjaChxdWVyeUVtYmVkZGluZywgcGRmSWQsIHRvcEspO1xuICAgIFxuICAgIHJldHVybiByZXN1bHRzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlYXJjaGluZyB2ZWN0b3IgZGF0YWJhc2U6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNlYXJjaCB2ZWN0b3IgZGF0YWJhc2UnKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ2h1bmtzRnJvbVZlY3RvckRCKGNodW5rSWRzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB2ZWN0b3JEQiA9IGF3YWl0IGdldFZlY3RvckRCKCk7XG4gIFxuICB0cnkge1xuICAgIGF3YWl0IHZlY3RvckRCLmRlbGV0ZUJ5SWRzKGNodW5rSWRzKTtcbiAgICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgJHtjaHVua0lkcy5sZW5ndGh9IGNodW5rcyBmcm9tIHZlY3RvciBkYXRhYmFzZWApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIGZyb20gdmVjdG9yIGRhdGFiYXNlOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBkZWxldGUgY2h1bmtzIGZyb20gdmVjdG9yIGRhdGFiYXNlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFsbENodW5rc0ZvclBERihwZGZJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHZlY3RvckRCID0gYXdhaXQgZ2V0VmVjdG9yREIoKTtcbiAgXG4gIHRyeSB7XG4gICAgYXdhaXQgdmVjdG9yREIuZGVsZXRlQnlQZGZJZChwZGZJZCk7XG4gICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBkZWxldGVkIGFsbCBjaHVua3MgZm9yIFBERiAke3BkZklkfSBmcm9tIHZlY3RvciBkYXRhYmFzZWApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIFBERiBjaHVua3MgZnJvbSB2ZWN0b3IgZGF0YWJhc2U6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGRlbGV0ZSBQREYgY2h1bmtzIGZyb20gdmVjdG9yIGRhdGFiYXNlJyk7XG4gIH1cbn0iXSwibmFtZXMiOlsiT3BlbkFJIiwiUGluZWNvbmUiLCJvcGVuYWkiLCJnZXRPcGVuQUlDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJFcnJvciIsImFwaUtleSIsInBpbmVjb25lIiwiZ2V0UGluZWNvbmVDbGllbnQiLCJQSU5FQ09ORV9BUElfS0VZIiwiUGluZWNvbmVWZWN0b3JEQiIsImNvbnN0cnVjdG9yIiwiaW5kZXhOYW1lIiwiUElORUNPTkVfSU5ERVhfTkFNRSIsImluaXRpYWxpemUiLCJjbGllbnQiLCJpbmRleExpc3QiLCJsaXN0SW5kZXhlcyIsImluZGV4RXhpc3RzIiwiaW5kZXhlcyIsInNvbWUiLCJpbmRleCIsIm5hbWUiLCJjb25zb2xlIiwibG9nIiwiY3JlYXRlSW5kZXgiLCJkaW1lbnNpb24iLCJtZXRyaWMiLCJzcGVjIiwic2VydmVybGVzcyIsImNsb3VkIiwicmVnaW9uIiwid2FpdEZvckluZGV4UmVhZHkiLCJlcnJvciIsIm1heFJldHJpZXMiLCJyZXRyaWVzIiwiaW5kZXhEZXNjcmlwdGlvbiIsImRlc2NyaWJlSW5kZXgiLCJzdGF0dXMiLCJyZWFkeSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInVwc2VydCIsImNodW5rcyIsInZlY3RvcnMiLCJtYXAiLCJjaHVuayIsImlkIiwidmFsdWVzIiwiZW1iZWRkaW5nIiwibWV0YWRhdGEiLCJwZGZJZCIsInBkZk5hbWUiLCJwYWdlTnVtYmVyIiwiY2h1bmtJbmRleCIsInRleHRMZW5ndGgiLCJiYm94WCIsImJib3hZIiwiYmJveFdpZHRoIiwiYmJveEhlaWdodCIsImNyZWF0ZWRBdCIsInRleHQiLCJsZW5ndGgiLCJzZWFyY2giLCJxdWVyeUVtYmVkZGluZyIsInRvcEsiLCJzZWFyY2hSZXF1ZXN0IiwidmVjdG9yIiwiaW5jbHVkZU1ldGFkYXRhIiwiaW5jbHVkZVZhbHVlcyIsImZpbHRlciIsIiRlcSIsInNlYXJjaFJlc3BvbnNlIiwicXVlcnkiLCJyZXN1bHRzIiwibWF0Y2hlcyIsIm1hdGNoIiwic2ltaWxhcml0eSIsInNjb3JlIiwiZGVsZXRlQnlQZGZJZCIsIkFycmF5IiwiZmlsbCIsImlkc1RvRGVsZXRlIiwiZGVsZXRlTWFueSIsImRlbGV0ZUJ5SWRzIiwiaWRzIiwidmVjdG9yREIiLCJnZXRWZWN0b3JEQiIsImdlbmVyYXRlRW1iZWRkaW5nIiwicmVzcG9uc2UiLCJlbWJlZGRpbmdzIiwiY3JlYXRlIiwibW9kZWwiLCJpbnB1dCIsImRhdGEiLCJ1cHNlcnRDaHVua3NUb1ZlY3RvckRCIiwic2VhcmNoU2ltaWxhckNodW5rcyIsImRlbGV0ZUNodW5rc0Zyb21WZWN0b3JEQiIsImNodW5rSWRzIiwiZGVsZXRlQWxsQ2h1bmtzRm9yUERGIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/vector.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@babel","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/bcryptjs","vendor-chunks/oauth","vendor-chunks/object-hash","vendor-chunks/preact","vendor-chunks/yallist","vendor-chunks/preact-render-to-string","vendor-chunks/lru-cache","vendor-chunks/cookie","vendor-chunks/@panva","vendor-chunks/oidc-token-hash","vendor-chunks/pdfjs-dist","vendor-chunks/formdata-node","vendor-chunks/@pinecone-database","vendor-chunks/openai","vendor-chunks/form-data-encoder","vendor-chunks/uuid","vendor-chunks/whatwg-url","vendor-chunks/agentkeepalive","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fupload%2Froute&page=%2Fapi%2Fupload%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fupload%2Froute.ts&appDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fgaureesh%2FStudyFetch%2FAiTutor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();